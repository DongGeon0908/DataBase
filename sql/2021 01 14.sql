# SQL 명령어를 실행할 대상인 기본 데이터베이스를 univDB로 지정
use univDB;

# safe mode 해제
SET SQL_SAFE_UPDATES =0;

/* 트랜잭션
- 관련 SQL 문장들을 묶어서 하나의 처리 단위로 다룸
- 한 묶음으로 처리되어야 하는 SQL 명령문들의 집합
- 전체 SQL 완료시 처리, 하나라도 실패시 전체 실패

커밋 commit
트랜잭션의 실행 결과를 데이터베이스에 최종적으로 반영하는 것
임시로 시행 처리한 트랜잭션의 실행 결과를 실제 데이터베이스에 반영한 명령

롤백 rollback
실행 결과를 반영하지 않고 취소해 원래 상태로 되돌리는 것

- 복수 사용자의 동시 접근성을 제어하고 장애 발생 시 안정적으로 데이터를 복구하기 위해 사용

원자성 Atomivity
트랜잭션 안의 SQL 명령문을 모두 성공적으로 실행해 완료하거나 모두 철회해 무효화시키는 것
전부 혹은 전무 실행 규칙

일관성 Consistency
데이터베이스가 트랜잭션 실행 전의 일관된 상태에서 트랜잭션 실행 후에도 또 다른 일관된 상태로 전환되어야함
트랜잭션 시작 전과 커밋 후에도 항상 데이터의 일관성 유지 
동시 실행되는 트랜잭션 사이의 상호 간섭을 락과 같은 수단을 통해 제어함으로써 데이터의 일관성 유지

고립성 Isolation
커밋될 때까지 트랜잭션이 수행한 임시 실행 결과가 다른 트랜잭션에게 공개되지 않아야함을 의미
같은 데이터를 처리하려는 다른 트랜잭션들의 간섭 방지
락을 통해 고립시켜 다른 트랜잭션의 접근 방지

지속성 Durability
트랜잭션이 커밋되면 그 트랜잭션의 실행 결과는 장애가 발생하더라도 보존되어야 함
커밋된 트랜잭션의 결과는 최종적으로 안정된 저장 장치에 반영되는 것을 보장, 결코 손상되지 않음
로그 등의 실행 기록을 참조해 이전 상태로 회복 가능

원자성, 일관성, 고립성, 지속성 등은 트랜잭션이 항상 만족해야 하는 필수 조건
*/

/* 트랜잭션 지원 DBMS 모듈

동시성 제어 concurrency control 모듈
- 동시에 실행되는 트랜잭션 간의 간섭 제어
- 각 트랜잭션이 순차적으로 실행한 결과와 동일한 고립성 결과를 보장
- 트랜잭션 실행 이전과 이후의 데이터베이스 일관성이 항상 유지
- 락킹 locking

회복 recovery 모듈
- 완전한 트랜잭션 결과의 복구 보장
- 장애 발생 시 트랜잭션 실행의 원자성 보장
- 커밋된 트랜잭션의 결과는 반드시 데이터베이스에 반영되도록 지속성 지원
- 로깅 logging
*/

/* 명시적 트랜잭션 == 사용자 트랜잭션 == 수동 트랜잭션
- 트랜잭션의 시작과 끝을 사용자가 직접 명시적으로 저장하는 트랜잭션

start transaction
- 직접 트랜잭션의 시작을 지시
- 명시적 트랜잭션 시작
- 기본 모드인 자동 모드 상태에서 수동 모드 상태로 전환

commit 
- 트랜잭션의 처리 결과를 성적으로 완료
- 변경 내용을 모두 실제 데이터베이스에 영구적으로 반영
- 트랜잭션 동작을 종료하고 다시 자동 모드 상태로 전환

rollback
- 트랜잭션 처리 내용을 취소하고 트랜잭션 시작 이전의 원래 상태로 되돌림
- 트랜잭션 시작 이전의 원래 상태로 되돌림
*/

# 명시적 트랜잭션의 적용 예
start transaction;
	delete from 학생 where 성별 = '남';
    select * from 학생;
rollback;
select * from 학생;





























