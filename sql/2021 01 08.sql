# SQL 명령어를 실행할 대상인 기본 데이터베이스를 univDB로 지정
use univDB;

/* JOIN
검색을 위해 참조해야할 테이블이 여러 개일 경우 조인 조건을 사용해 검색문 작성
둘 이상의 테이블로부터 연관된 행들의 결합을 통해 검색 결과 생성

방법 1.
From절에 조인 대상 테이블 이름
Where절에 조인_조건식 

방법 2.
From절에 조인 테이블과 조인_조건식 

조인_조건식
조인 대상이 되는 관련 테이블 사이의 기본키와 외래키를 조인 속성으로 명세
From절에 명세한 조인 대상 테이블이 n개이면 n-1개의 조인_조건식 필요

Join에서는 별칭 생략 가능
*/

/* 크로스조인
테이블 행들 사이의 모든 조합을 행으로 갖는 하나의 통합 테이블
조인_조건식 없이 이뤄진 모든 조인
관계 대수의 카티션 프로덕트 연산을 적용한 결과 반환
기계적인 결합
*/

# 학생테이블과 수강테이블의 크로스조인
select * from 학생, 수강;
select * from 학생 cross join 수강;

/* 동등 조인
조인_조건식에 = 연산자를 사용하는 동등 조건에 의한 조인
두 테이블 행들 사이의 의미있는 조합 검색
*/

# 전체 학생의 기본 정보와 모든 수강 정보 검색
select * from 학생, 수강 where 학생.학번 = 수강.학번;
select * from 학생 join 수강 on 학생.학번 = 수강.학번;

/* 테이블_이름.열_이름
하나의 질의문 안에서 여러 테이블을 사용하는 경우 모호성 문제를 해결하기 위해 사용
*/

# 학생 중에서 과목번호가 c002인 과목을 수강한 학생의 학번과 이름, 과목번호 그리고 반환중간성적(학생별 중간 성적의 10% 가산점수) 검색
select 학생.학번, 이름, 과목번호, 중간성적+(중간성적*0.1) as 변환중간성적
from 학생, 수강
where 학생.학번 = 수강.학번 and 과목번호="c002";

select 학생.학번, 이름, 과목번호, 중간성적+(중간성적*0.1) as 변환중간성적
from 학생 join 수강 on 학생.학번 = 수강.학번
where 과목번호 = "c002";

# 학생 중에서 정보보호 과목을 수강한 학생의 학번과 이름, 과목번호를 검색
select 학생.학번, 학생.이름, 수강.과목번호
from 학생, 수강, 과목
where 학생.학번 = 수강.학번 and 수강.과목번호 = 과목.과목번호 and 과목.이름 ="정보보호";

select 학생.학번, 학생.이름, 수강.과목번호
from (학생 join 수강 on 학생.학번 = 수강.학번) join 과목 on 수강.과목번호 = 과목.과목번호
where 과목.이름 = "정보보호";

# 학생 중에서 과목번호가 c002인 과목을 수강한 학생의 이름, 과목번호 검색
select 이름, 과목번호 from 학생 as s, 수강 e where s.학번 = e.학번 and 과목번호 = "c002";

/* 셀프 조인
특정 테이블에 속하는 행들을 같은 테이블에 속하는 행들과 조인

하나의 테이블은 테이블 별칭을 다르게 지정함으로써 셀프 조인 가능

같은 테이블 안의 행들도 역할이나 의미를 다르게 부여하는 경우0
*/

# 주소가 같은 학생들의 이름을 쌍으로 검색, 검색되는 첫 번째 학생이 두번째 학생보다 학년이 높도록
select s1.이름, s2.이름 from 학생 s1 join 학생 s2 on s1.주소 = s2.주소 where s1.학년 > s2.학년;

/* 외부 조인
조인 대상 테이블의 모든 행들이 결과에 포함되기를 원하는 경우
*/

/* Left Outer Join
조인 연산자의 왼쪽 테이블의 모든 행들이 빠짐없이 조인 최종 결과에 포함
*/

/* Right Outer Join
조인 연산자의 오른쪽 테이블의 모든 행들이 빠짐없이 조인 최종 결과에 포함
*/

/* Full outer Join
조인 연산자의 왼쪽과 오른쪽 테이블의 모든 행들이 빠짐없이 조인 최종 결과에 포함
*/

# 과목을 수강하지 않은 학생을 포함해 모든 학생의 학번, 이름과 학생이 수강한 교과의 평가학점을 검색
select 학생.학번, 이름, 평가학점 from 학생 left outer join 수강 on 학생.학번 = 수강.학번;

/* insert
기본적으로 한번에 행 하나씩 입력
*/

/* 복제 테이블 생성
create table 복제 테이블명 as 원본 테이블명
키나 제약조건은 복제되지 않음
*/

# 학생, 과목, 수강 테이블 복제
create table 학생1 as (select * from 학생);
create table 과목1 as (select * from 과목);
create table 수강1 as (select * from 수강);

# 학생1 테이블에 학번 g001, 이름 김연아2 주소 서웋 서초, 학년4, 나이 23, 성별 여, 휴대폰 010-3182-9709 소소학과 컴퓨터인 학생 정보 삽입
insert into 학생1 values("g002", "김연아2", "서울 서초", 4, 23, "여", "010-1111-2222", "컴퓨터");

# 학번 g002, 이름 홍길동2, 주소 미정, 학년 1, 나이 26, 성별 남, 휴대폰 번호 null, 소속학과 통계인 학생 정보 삽입
insert into 학생1(이름, 주소, 학년, 나이, 성별, 휴대폰번호, 소속학과, 학번) values ("홍길동2", default, 1, 26, "남", null, "통계", "g002");
insert into 학생1(이름, 학년, 나이, 성별, 소속학과, 학번) values("홍길동2",1,26,"남","통계","g002");

/* update
테이블 안의 특정 행을 수정
기본키와 외래키에 해당하는 열들은 참조 무결성 제약 조건을 위배하지 안흔 범주 안에서만 수정 가능
*/

# 안전모드 낮게 변경
set SQL_SAFE_UPDATES = 0;

# 이은진 학생의 학년을 3학년으로 수정 -> 단일 행, 단일 열 수정
update 학생1 set 학년 =3 where 이름 = "이은진";

# 모든 학생의 학년을 1씩 증가시키고 소속학과를 자유전공학부로 변경 -> 복수 행, 복수 열 수정
update 학생1 set 학년 = 학년 + 1, 소속학과 = "자유전공학부" where 학년 = 4;

# 수강 내용이 없는 학생의 소속학과를 널 값으로 수정 -> 부 질의문을 이용한 수정
update 학생1 set 소속학과 = null where 학번 not in (select 학번 from 수강1);

# 학번이 s003인 학생의 수강 내용을 이은진 학생이 수강한 것으로 수정
update 수강1 set 학번 = (select 학번 from 학생1 where 이름 = "이은진") where 학번 = "s003";

/* delete
특정 테이블을 삭제
*/

# 송윤아 학생의 모든 정보를 삭제 -> 단일 행 삭제
delete from 학생1 where 이름 = "송윤아";

# 3학년 모든 학생의 정보 삭제 -> 복수 행 삭제
delete from 학생1 where 학년=3;

# 수강자가 2명 미만인 과목에 대해 과목 정보를 모두 삭제 -> 부 질의문을 이용한 삭제
delete from 과목1 where 과목번호 in (select 과목번호 from 수강1 group by 과목번호 having count(*)<2);

# 모든 학생 정보 삭제 -> 모든 행 삭제
delete from 학생1;

/*
delete -> 테이블의 행 삭제
drop -> 테이블 삭제
*/

























