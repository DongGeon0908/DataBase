# SQL 명령어를 실행할 대상인 기본 데이터베이스를 univDB로 지정
use univDB;

/* JOIN
검색을 위해 참조해야할 테이블이 여러 개일 경우 조인 조건을 사용해 검색문 작성
둘 이상의 테이블로부터 연관된 행들의 결합을 통해 검색 결과 생성

방법 1.
From절에 조인 대상 테이블 이름
Where절에 조인_조건식 

방법 2.
From절에 조인 테이블과 조인_조건식 

조인_조건식
조인 대상이 되는 관련 테이블 사이의 기본키와 외래키를 조인 속성으로 명세
From절에 명세한 조인 대상 테이블이 n개이면 n-1개의 조인_조건식 필요

Join에서는 별칭 생략 가능
*/

/* 크로스조인
테이블 행들 사이의 모든 조합을 행으로 갖는 하나의 통합 테이블
조인_조건식 없이 이뤄진 모든 조인
관계 대수의 카티션 프로덕트 연산을 적용한 결과 반환
기계적인 결합
*/

# 학생테이블과 수강테이블의 크로스조인
select * from 학생, 수강;
select * from 학생 cross join 수강;

/* 동등 조인
조인_조건식에 = 연산자를 사용하는 동등 조건에 의한 조인
두 테이블 행들 사이의 의미있는 조합 검색
*/

# 전체 학생의 기본 정보와 모든 수강 정보 검색
select * from 학생, 수강 where 학생.학번 = 수강.학번;
select * from 학생 join 수강 on 학생.학번 = 수강.학번;

/* 테이블_이름.열_이름
하나의 질의문 안에서 여러 테이블을 사용하는 경우 모호성 문제를 해결하기 위해 사용
*/

# 학생 중에서 과목번호가 c002인 과목을 수강한 학생의 학번과 이름, 과목번호 그리고 반환중간성적(학생별 중간 성적의 10% 가산점수) 검색
select 학생.학번, 이름, 과목번호, 중간성적+(중간성적*0.1) as 변환중간성적
from 학생, 수강
where 학생.학번 = 수강.학번 and 과목번호="c002";

select 학생.학번, 이름, 과목번호, 중간성적+(중간성적*0.1) as 변환중간성적
from 학생 join 수강 on 학생.학번 = 수강.학번
where 과목번호 = "c002";

# 학생 중에서 정보보호 과목을 수강한 학생의 학번과 이름, 과목번호를 검색
select 학생.학번, 학생.이름, 수강.과목번호
from 학생, 수강, 과목
where 학생.학번 = 수강.학번 and 수강.과목번호 = 과목.과목번호 and 과목.이름 ="정보보호";

select 학생.학번, 학생.이름, 수강.과목번호
from (학생 join 수강 on 학생.학번 = 수강.학번) join 과목 on 수강.과목번호 = 과목.과목번호
where 과목.이름 = "정보보호";

# 학생 중에서 과목번호가 c002인 과목을 수강한 학생의 이름, 과목번호 검색
select 이름, 과목번호 from 학생 as s, 수강 e where s.학번 = e.학번 and 과목번호 = "c002";

/* 셀프 조인
특정 테이블에 속하는 행들을 같은 테이블에 속하는 행들과 조인

하나의 테이블은 테이블 별칭을 다르게 지정함으로써 셀프 조인 가능

같은 테이블 안의 행들도 역할이나 의미를 다르게 부여하는 경우0
*/

# 주소가 같은 학생들의 이름을 쌍으로 검색, 검색되는 첫 번째 학생이 두번째 학생보다 학년이 높도록
select s1.이름, s2.이름 from 학생 s1 join 학생 s2 on s1.주소 = s2.주소 where s1.학년 > s2.학년;

/* 외부 조인
조인 대상 테이블의 모든 행들이 결과에 포함되기를 원하는 경우
*/

/* Left Outer Join
조인 연산자의 왼쪽 테이블의 모든 행들이 빠짐없이 조인 최종 결과에 포함
*/

/* Right Outer Join
조인 연산자의 오른쪽 테이블의 모든 행들이 빠짐없이 조인 최종 결과에 포함
*/

/* Full outer Join
조인 연산자의 왼쪽과 오른쪽 테이블의 모든 행들이 빠짐없이 조인 최종 결과에 포함
*/

# 과목을 수강하지 않은 학생을 포함해 모든 학생의 학번, 이름과 학생이 수강한 교과의 평가학점을 검색
select 학생.학번, 이름, 평가학점 from 학생 left outer join 수강 on 학생.학번 = 수강.학번;













































